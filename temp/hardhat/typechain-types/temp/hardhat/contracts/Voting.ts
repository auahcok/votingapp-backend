/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Voting {
  export type VoteStruct = {
    userId: string;
    eventId: string;
    candidateId: string;
  };

  export type VoteStructOutput = [
    userId: string,
    eventId: string,
    candidateId: string
  ] & { userId: string; eventId: string; candidateId: string };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature: "castVote" | "getVote" | "hasVoted" | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "hasVoted", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "votes", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [userId: string, eventId: string, candidateId: string],
    [void],
    "nonpayable"
  >;

  getVote: TypedContractMethod<
    [userId: string, eventId: string, candidateId: string],
    [Voting.VoteStructOutput],
    "view"
  >;

  hasVoted: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  votes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string] & {
        userId: string;
        eventId: string;
        candidateId: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [userId: string, eventId: string, candidateId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [userId: string, eventId: string, candidateId: string],
    [Voting.VoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string] & {
        userId: string;
        eventId: string;
        candidateId: string;
      }
    ],
    "view"
  >;

  filters: {};
}
