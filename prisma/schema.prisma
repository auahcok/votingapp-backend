// schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SUPER_ADMIN
  DEFAULT_USER
}

// User Management
model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String          @unique
  name              String
  password          String? // Dibuat optional karena user bisa login dengan Google
  avatar            String?
  metamaskAddress   String?         @unique
  nonce             String?
  role              UserRole
  googleId          String?         @unique // ID unik dari Google
  googleToken       String? // Access token dari Google
  passwordResetCode String?
  tokenExpiry       DateTime? // Waktu expired token
  createdAt         DateTime?       @default(now())
  updatedAt         DateTime?       @updatedAt
  votes             UserVoteEvent[]
}

// Event
model Event {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  title       String
  description String
  isActive    Boolean
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  candidates  Candidate[]
  votes       UserVoteEvent[]
}

// Candidate
model Candidate {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  eventId  String          @db.ObjectId // Reference the event's id as ObjectId
  photo    String
  name     String
  position String
  visi     String
  misi     String
  comment  String
  sequence Int
  event    Event           @relation(fields: [eventId], references: [id])
  votes    UserVoteEvent[]
}

// UserVoteEvent
model UserVoteEvent {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  userId          String    @db.ObjectId // Reference to user's metamaskAddress
  eventId         String    @db.ObjectId // Reference to event's id
  candidateId     String    @db.ObjectId // Reference to candidate's id
  transactionHash String?
  user            User      @relation(fields: [userId], references: [id])
  event           Event     @relation(fields: [eventId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
}
